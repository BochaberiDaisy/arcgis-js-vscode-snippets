{
  "Add a layer from a portal item": {
    "body": [
      "Layer.fromPortalItem({",
      "\tportalItem: {",
      "\t\tid: \"${1:af1ad38816814b7eba3fe74a3b84412d}\"",
      "\t}",
      "}).then(function(layer) {",
      "\t\tmap.add(layer);",
      "});"
    ],
    "description": "Add a new layer to the map using a portal item id. Contains a placeholder for the portal item id. AMD path: esri/layers/Layer | ESM path: @arcgis/core/layers/Layer.js",
    "prefix": "addLayerFromPortalItem"
  },
  "Add ArcGIS JS SDK require": {
    "body": [
      "require([",
      "\t\"esri/Map\",",
      "\t\"esri/views/MapView\"",
      "], function(",
      "\tMap,",
      "\tMapView",
      "){",
      "\t",
      "});"
    ],
    "description": "Load the Map and MapView modules using require.",
    "prefix": "require"
  },
  "Add ArcGIS JS SDK require (API keys)": {
    "body": [
      "require([",
      "\t\"esri/config\",",
      "\t\"esri/Map\",",
      "\t\"esri/views/MapView\"",
      "], function(",
      "\tesriConfig,",
      "\tMap,",
      "\tMapView",
      "){",
      "\tesriConfig = \"${1:YOUR_API_KEY}\";",
      "});"
    ],
    "description": "Load the config, Map and MapView modules using require",
    "prefix": "requireApiKeys"
  },
  "Add edges to 3D symbols": {
    "body": [
      "{",
      "\ttype: \"${1|solid,sketch|}\",",
      "\tcolor: ${2:[50, 50, 50, 0.5]},",
      "\tsize: ${3:1},",
      "\textensionLength: ${4:0}",
      "}"
    ],
    "description": "Add edge rendering visualization to existing symbols. Can only be applied to \"edges\" property of FillSymbol3DLayer on MeshSymbol3D or ExtrudeSymbol3DLayer on PolygonSymbol3D.",
    "prefix": "edges3DProps"
  },
  "City scale 3D callout": {
    "body": [
      "{",
      "\tborder: {",
      "\t\tcolor: ${1:[0, 0, 0, 0.5]},",
      "\t},",
      "\tcolor: ${2:[255, 255, 255, 0.9]},",
      "\tsize: ${3:1.5},",
      "\ttype: \"line\",",
      "},",
      "verticalOffset: {",
      "\tmaxWorldLength: 200,",
      "\tminWorldLength: 20,",
      "\tscreenLength: 20,",
      "}"
    ],
    "description": "Generates a Callout3D with a verticalOffset for a city scale level and the callout property. They should be set on the property \"callout\" of PointSymbol3D or LabelSymbol3D.",
    "prefix": [
      "callout3DSmallProps"
    ]
  },
  "Create 2D MapView from a portalItem": {
    "body": [
      "new MapView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: new WebMap({",
      "\t\tportalItem: {",
      "\t\t\tid: \"${2:webmap_id}\"",
      "\t\t}",
      "\t})",
      "});"
    ],
    "description": "Create 2D map using a WebMap and a portalItem. AMD paths: esri/views/MapView & esri/WebMap | ESM paths: @arcgis/core/views/MapView.js & @arcgis/core/WebMap.js",
    "prefix": [
      "MapViewWebMap"
    ]
  },
  "Create 3D map from a portalItem": {
    "body": [
      "new SceneView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: new WebScene({",
      "\t\tportalItem: {",
      "\t\t\tid: \"${2:webscene_id}\"",
      "\t\t}",
      "\t})",
      "});"
    ],
    "description": "Create 3D map using a WebScene and a portalItem. AMD paths: esri/views/SceneView & esri/WebScene | ESM Paths: @arcgis/core/views/SceneView.js & @arcgis/core/WebScene.js",
    "prefix": [
      "SceneViewWebScene"
    ]
  },
  "Create basic 2D map": {
    "body": [
      "new MapView({",
      "\tcontainer: ${1:\"viewDiv\"},",
      "\tmap: {",
      "\t  basemap: \"${2|arcgis-imagery,arcgis-imagery-standard,arcgis-imagery-labels,arcgis-light-gray,arcgis-dark-gray,arcgis-navigation,arcgis-navigation-night,arcgis-streets,arcgis-streets-night,arcgis-streets-relief,arcgis-topographic,arcgis-oceans,osm-standard,osm-standard-relief,osm-streets,osm-streets-relief,osm-light-gray,osm-dark-gray,arcgis-terrain,arcgis-community,arcgis-charted-territory,arcgis-colored-pencil,arcgis-nova,arcgis-modern-antique,arcgis-midcentury,arcgis-newspaper,arcgis-hillshade-light,arcgis-hillshade-dark|}\"",
      "\t},",
      "\tzoom: ${3:4},",
      "\tcenter: ${4:[15, 65]}",
      "});"
    ],
    "description": "Create 2D MapView using a Map. AMD path: esri/views/MapView | ESM path: @arcgis/core/views/MapView.js",
    "prefix": [
      "MapViewMap"
    ]
  },
  "Create basic 3D map": {
    "body": [
      "new SceneView({",
      "\tcontainer: \"${1:viewDiv}\",",
      "\tmap: {",
      "\t\tbasemap: \"${2:streets}\"",
      "\t}",
      "});"
    ],
    "description": "Create 3D SceneView using a Map. AMD path: esri/views/SceneView | ESM path: @arcgis/core/views/SceneView.js",
    "prefix": [
      "SceneViewMap"
    ]
  },
  "Create object point 3D": {
    "body": [
      "{",
      "\ttype: \"point-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"object\",",
      "\t\tresource: { primitive: \"${1|sphere,cylinder,cube,cone,inverted-cone,diamond,tetrahedron|}\"},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\tdepth: ${3:15},",
      "\t\theight: ${4:20},",
      "\t\twidth: ${5:5}",
      "\t}]",
      "}"
    ],
    "description": "Generate PointSymbol3D with a ObjectSymbol3DLayer",
    "prefix": "pointSymbol3dProps"
  },
  "Create Picture marker symbol": {
    "body": [
      "{",
      "\ttype: \"picture-marker\",",
      "\turl: \"image-url\",",
      "\theight: 12,",
      "\twidth: 12",
      "}"
    ],
    "description": "Create a PictureMarkerSymbol, allowing custom image-based markers for points on maps",
    "prefix": "pictureMarkerSymbolProps"
  },
  "Feature reduction cluster properties": {
    "body": [
      "{",
      "\tclusterMaxSize: 37.5,",
      "\tclusterMinSize: 16.5,",
      "\tclusterRadius: 60,",
      "\tlabelingInfo: [{",
      "\t\tdeconflictionStrategy: \"none\",",
      "\t\tlabelExpressionInfo: {",
      "\t\t\texpression: `",
      "\t\t\t\t\\$feature[\"cluster_count\"];",
      "\t\t\t\tconst value = \\$feature[\"cluster_count\"];",
      "\t\t\t\tconst num = Count(Text(Round(value)));",
      "\t\t\t\tconst label = When(",
      "\t\t\t\t\tnum < 4, Text(value, \"#.#\"),",
      "\t\t\t\t\tnum == 4, Text(value / Pow(10, 3), \"#.0k\"),",
      "\t\t\t\t\tnum <= 6, Text(value / Pow(10, 3), \"#k\"),",
      "\t\t\t\t\tnum == 7, Text(value / Pow(10, 6), \"#.0m\"),",
      "\t\t\t\t\tnum > 7, Text(value / Pow(10, 6), \"#m\"),",
      "\t\t\t\t\tText(value, \"#,###\")",
      "\t\t\t\t);",
      "\t\t\t\treturn label;",
      "\t\t\t`",
      "\t\t},",
      "\t\tsymbol: {",
      "\t\t\tcolor: \"rgba(240,240,240,1)\",",
      "\t\t\tfont: {",
      "\t\t\t\tfamily: \"Noto Sans\",",
      "\t\t\t\tsize: \"12px\",",
      "\t\t\t\tweight: \"bold\"",
      "\t\t\t},",
      "\t\t\thaloColor: \"rgba(55,56,55,1)\",",
      "\t\t\thaloSize: 0.75,",
      "\t\t\ttype: \"text\"",
      "\t\t},",
      "\t\tlabelPlacement: \"center-center\"",
      "\t}],",
      "\tlabelsVisible: true,",
      "\tpopupEnabled: true,",
      "\tpopupTemplate: {",
      "\t\tcontent: \"This cluster represents <b>{cluster_count}</b> features.\",",
      "\t\tfieldInfos: [{",
      "\t\t\tfieldName: \"cluster_count\",",
      "\t\t\tformat: {",
      "\t\t\t\tdigitSeparator: true,",
      "\t\t\t\tplaces: 0",
      "\t\t\t},",
      "\t\t\tlabel: \"Number of features\"",
      "\t\t],",
      "\t\ttitle: \"Cluster summary\"",
      "\t},",
      "\ttype: \"cluster\",",
      "}"
    ],
    "description": "Generates the configuration for clustering in a MapView. This should be set on layers containing point geometry. This snippet is usually used to set the property \"featureReduction\" of a FeatureLayer, CSVLayer, GeoJSONLayer, WFSLayer, or OGCFeatureLayer",
    "prefix": [
      "featureReductionClusterProps",
      "clusterConfig"
    ]
  },
  "Find a layer by it's name": {
    "body": [
      "view.map.layers.find( l => l.title === \"${1:LayerTitle}\" );"
    ],
    "description": "Find a layer in the MapView by it's title",
    "prefix": "findLayer"
  },
  "Generate a DotDensity renderer": {
    "body": [
      "{",
      "\ttype: 'dot-density',",
      "\tdotValue: ${1:initialValue},",
      "\toutline: null,",
      "\tlegendOptions: {",
      "\t\tunit: \"${2:unitDot}\"",
      "\t},",
      "\tattributes: [",
      "\t\t{",
      "\t\t\tfield: \"${3:field_1}\",",
      "\t\t\tcolor: \"${4:color_1}\",",
      "\t\t\tlabel: \"${5:label_1}\"",
      "\t\t},",
      "\t\t{",
      "\t\t\tfield: \"${6:field_2}\",",
      "\t\t\tcolor: \"${7:color_2}\",",
      "\t\t\tlabel: \"${8:label_2}\"",
      "\t\t}",
      "\t]",
      "}"
    ],
    "description": "Generate a DotDensity Renderer",
    "prefix": "dotDensityRendererProps"
  },
  "Generate fill polygon 3D": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"fill\",",
      "\t\tpattern: {",
      "\t\t\ttype: \"style\",",
      "\t\t\tstyle: \"${1|solid,vertical,horizontal,forward-diagonal,diagonal-cross,cross,backward-diagonal|}\"",
      "\t\t},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\toutline: { color: ${3:[70, 70, 70, 0.7]}}",
      "\t}]",
      "}"
    ],
    "description": "Generate PolygonSymbol3D with a FillSymbol3DLayer",
    "prefix": "fillPolygon3d"
  },
  "How features are placed on the vertical axis (z)": {
    "body": [
      "{",
      "\tmode: \"${1|on-the-ground,relative-to-ground,absolute-height,relative-to-scene|}\",",
      "\toffset: ${2:10},",
      "\tfeatureExpressionInfo: {",
      "\t\texpression: \"${3:Geometry(\\$feature).z\"}",
      "\t},",
      "\tunit: \"${4|feet,meters,kilometers,miles,us-feet,yards|}\"",
      "}"
    ],
    "description": "Specifies how features are placed on the vertical axis (z). This snippets should be used to set the property \"elevationInfo\" of a FeatureLayer, CSVLayer, WFSLayer, SceneLayer, StreamLayer, GeoJSONLayer, IntegratedMeshLayer, etc.",
    "prefix": "elevationInfoProps"
  },
  "LabelingInfo for labels in a MapView": {
    "body": [
      "new LabelClass({",
      "\tlabelExpressionInfo: { expression: \"${1:\\$feature.NAME}\"},",
      "\tsymbol: {",
      "\t\ttype: \"text\",",
      "\t\tcolor: ${2:[0, 0, 0, 0.5]},",
      "\t\thaloSize: ${3:1},",
      "\t\thaloColor: ${4:[255, 255, 255, 0.9]}",
      "\t}",
      "})"
    ],
    "description": "Creates the labelingInfo for labels in a layer for 2D maps. It in normally used in the property \"labelingInfo[]\" of a FeatureLayer, CSVLayer, GeoJSONLayer, StreamLayer, OGCFeatureLayer, or WFSLayer in 2D MapViews. AMD path: esri/layers/support/LabelClass | ESM path: @arcgis/core/layers/support/LabelClass.js",
    "prefix": [
      "LabelClass2D",
      "labeling2d"
    ]
  },
  "LabelingInfo for labels in a SceneView": {
    "body": [
      "new LabelClass({",
      "\tlabelExpressionInfo: { expression: \"${1:\\$feature.NAME}\"},",
      "\tsymbol: {",
      "\t\ttype: \"label-3d\",",
      "\t\tsymbolLayers: [{",
      "\t\t\ttype: \"text\",",
      "\t\t\tmaterial: {",
      "\t\t\t\tcolor: ${2:[0, 0, 0, 0.5]}",
      "\t\t\t},",
      "\t\t\thalo: {",
      "\t\t\t\tsize: ${3: 1},",
      "\t\t\t\tcolor: ${4:[255, 255, 255, 0.9]}",
      "\t\t\t},",
      "\t\t\tfont: {",
      "\t\t\t\tsize: ${5: 11},",
      "\t\t\t\tfamily: ${6:\"sans-serif\"}",
      "\t\t\t}",
      "\t\t}]",
      "\t}",
      "})"
    ],
    "description": "Creates the labelingInfo for labels in a layer for 3D maps. It is normally used in the property \"labelingInfo[]\" of a FeatureLayer, SceneLayer or any layyer with that property within a SceneView. AMD path: esri/layers/support/LabelClass | ESM path: @arcgis/core/layers/support/LabelClass.js",
    "prefix": [
      "LabelClass3D",
      "labeling3d"
    ]
  },
  "Render 2D points with a shape & color": {
    "body": [
      "{",
      "\ttype: \"simple-marker\",",
      "\tcolor: [255, 255, 255, 0.25],",
      "\tsize: 12,",
      "\tstyle: \"${1|circle,square,cross,x,diamond,triangle,path|}\",",
      "\toutline: {",
      "\t\twidth: 1,",
      "\t\tcolor: [255, 255, 255, 1]",
      "\t}",
      "}"
    ],
    "description": "Create a SimpleMarkerSymbol for rendering 2D Point geometries with a simple shape and color in either a MapView or a SceneView, but for 3D it is recommended to use PointSymbol3D. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "simpleMarkerSymbolProps"
    ]
  },
  "Render 2D polygons geometries": {
    "body": [
      "{",
      "\ttype: \"simple-fill\",",
      "\tcolor: [0, 0, 0, 0.25],",
      "\tstyle: \"${1|solid,backward-diagonal,cross,diagonal-cross,forward-diagonal,horizontal,none,vertical|}\",",
      "\toutline: {",
      "\t\twidth: 1,",
      "\t\tcolor: [255, 255, 255, 1]",
      "\t}",
      "}"
    ],
    "description": "Create a SimpleFillSymbol for rendering 2D polygon geometries in a 2D or 3D view, but for 3D it is recommended to use PolygonSymbol3D. It can be filled with a solid color, or a pattern. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "simpleFillSymbolProps"
  },
  "Render 2D polyline geometries": {
    "body": [
      "{",
      "\ttype: \"simple-line\",",
      "\twidth: 1,",
      "\tcolor: [255, 255, 255, 1],",
      "\tstyle: \"${1|solid,none,dash,dash-dot,dot,long-dash,long-dash-dot,long-dash-dot-dot,short-dash,short-dash-dot,short-dash-dot-dot,short-dot|}\",",
      "\tcap: \"${2|round,butt,square|}\",",
      "\tjoin: \"${3|round,miter,bevel|}\"",
      "}"
    ],
    "description": "Create a SimpleLineSymbol for rendering 2D polyline geometries in a 2D or 3D view, but for 3D it is recommended to use LineSymbol3D. It can be used in several properties like \"symbol\" of renderers or individual graphics, but also \"outline\" of marker and fill symbols.",
    "prefix": [
      "simpleLineSymbolProps"
    ]
  },
  "Render 3D mesh polygon features in a 3D": {
    "body": [
      "{",
      "\ttype: \"mesh-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"fill\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t}]",
      "}"
    ],
    "description": "Generate MeshSymbol3D with a FillSymbol3DLayer in a SceneLayer in a SceneView. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "fillMesh3dProps",
      "meshSymbol3DProps"
    ]
  },
  "Render all features with one symbol": {
    "body": [
      "{",
      "\ttype: \"simple\",",
      "\tsymbol: ${1:symbol}",
      "}"
    ],
    "description": "Renders all features in a Layer with one Symbol. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, or StreamLayer.",
    "prefix": [
      "simpleRendererProps"
    ]
  },
  "Render an image in a repeating pattern (2D)": {
    "body": [
      "{",
      "\ttype: \"picture-fill\",",
      "\turl: \"${1:image-url}\",",
      "\twidth: 12,",
      "\theight: 12,",
      "\txoffset: 0,",
      "\tyoffset: 0",
      "}"
    ],
    "description": "PictureFillSymbol uses an image in a repeating pattern to symbolize polygon features in a 2D MapView. patterns for polygons. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "pictureFillSymbolProps"
  },
  "Render points using a flat 2D icon": {
    "body": [
      "{",
      "\ttype: \"point-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"icon\",",
      "\t\tresource: { primitive: \"${1|circle,square,cross,x,kite,triangle|}\"},",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${3:20}",
      "\t}]",
      "}"
    ],
    "description": "Generate PointSymbol3D with a IconSymbol3DLayer in a SceneView. Available shapes: circle, square, cross, x, kite, and triangle. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "pointSymbol3dIconProps"
  },
  "Render polygons as animated water surfaces": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"water\",",
      "\t\twaveDirection: 180,",
      "\t\tcolor: \"#5975a3\",",
      "\t\twaveStrength: \"${1|calm,rippled,slight,moderate|}\",",
      "\t\twaterbodySize: \"${2|small,medium,large|}\"",
      "\t}]",
      "}"
    ],
    "description": "WaterSymbol3DLayer is used to render Polygon geometries as realistic, animated water surfaces, therefore it can only be used inside a PolygonSymbol3D. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": "waterSymbol3dLayerProps"
  },
  "Render polygons by extruding them": {
    "body": [
      "{",
      "\ttype: \"polygon-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"extrude\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${2:20}",
      "\t}]",
      "}"
    ],
    "description": "Generate PolygonSymbol3D with a ExtrudeSymbol3DLayer to be used in a SceneView.  It render polygon geometries by extruding them upward from the ground, creating a 3D volumetric object. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "polygonSymbol3DExtrudeProps",
      "extrudePolygon3d"
    ]
  },
  "Render polylines by extruding 2D profile": {
    "body": [
      "{",
      "\ttype: \"line-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"path\",",
      "\t\tprofile: \"${1|circle,quad|}\",",
      "\t\tmaterial: { color: ${2:[255, 250, 239, 0.8]} },",
      "\t\twidth: ${3:15},",
      "\t\theight: ${3:15},",
      "\t\tjoin: \"${4|miter,bevel,round|}\",",
      "\t\tcap: \"${5|butt,square,round,none|}\",",
      "\t\tanchor: \"${6|bottom,center|}\",",
      "\t\tprofileRotation: \"${7|all,heading|}\"",
      "\t}]",
      "}"
    ],
    "description": "Generate LineSymbol3D with a PathSymbol3DLayer. Renders Polyline geometries by extruding a 2D profile along the line. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics.",
    "prefix": [
      "lineSymbol3DPathProps",
      "path3d"
    ]
  },
  "Render polylines using a flat 3D line": {
    "body": [
      "{",
      "\ttype: \"line-3d\",",
      "\tsymbolLayers: [{",
      "\t\ttype: \"line\",",
      "\t\tmaterial: { color: ${1:[255, 250, 239, 0.8]} },",
      "\t\tsize: ${2:15}",
      "\t}]",
      "}"
    ],
    "description": "Generate LineSymbol3D with a LineSymbol3DLayer in a SceneView. This snippet is usually used to set the property \"symbol\" of renderers or individual graphics",
    "prefix": [
      "lineSymbol3DProps"
    ]
  },
  "Set color of features based on a numeric value": {
    "body": [
      "{",
      "\tfield: \"${1:POP_POVERTY}\",",
      "\tlegendOptions: {",
      "\t\ttitle: \"${3:% population in poverty by county}\"",
      "\t},",
      "\tnormalizationField: \"${2:POP_TOT}\",",
      "\tstops: [",
      "\t\t{ value: ${4:0.15}, color: ${5: \"#FFFCD4\" }, label: \"${6:<15%}\" },",
      "\t\t{ value: ${7:0.25}, color: ${8: \"#0D2644\" }, label: \"${9:>25%}\" }",
      "\t],",
      "\ttype: \"color\"",
      "}"
    ],
    "description": "Generate a ColorVariable with 2 color stops. Used to visualize features along a continuous color ramp based on the values of a numeric attribute field or an expression. This snippet is usually used to set the property \"visualVariables[]\" of a renderer class.",
    "prefix": [
      "colorVarProps"
    ]
  },
  "Set environment for a scene background": {
    "body": [
      "{",
      "\tbackground: {",
      "\t\ttype: \"color\",",
      "\t\tcolor: ${1:[0, 0, 0, 0]}",
      "\t},",
      "\tstarsEnabled: false,",
      "\tatmosphereEnabled: false",
      "}"
    ],
    "description": "Creates an environment object for changing the background of a scene. This snippet is usually used to set the property \"environment\" of the SceneView.",
    "prefix": [
      "sceneViewEnvironmentProps",
      "background"
    ]
  },
  "Set size of features based on a numeric value": {
    "body": [
      "{",
      "\ttype: \"size\",",
      "\tfield: \"${1:POP_POVERTY}\",",
      "\tnormalizationField: \"${2:POP_TOT}\",",
      "\taxis: \"height\",",
      "\tlegendOptions: {",
      "\t\ttitle: \"${3:% population in poverty by county}\"",
      "\t},",
      "\tstops: [",
      "\t\t{ value: ${4:0.15}, size: ${5:4}, label: \"${6:<15%}\" },",
      "\t\t{ value: ${7:0.25}, size: ${8:12}, label: \"${9:25%}\" }",
      "\t]",
      "}"
    ],
    "description": "Set size of features based on a numeric value. Creates a SizeVariable with 2 size stops. The axis property is only used in 3D. This snippet is usually used to set the property \"visualVariables[]\" of a renderer.",
    "prefix": [
      "sizeVisualVariableProps",
      "sizeVar"
    ]
  },
  "Styles with API keys": {
    "body": [
      "\"${1|arcgis-imagery,arcgis-imagery-standard,arcgis-imagery-labels,arcgis-light-gray,arcgis-dark-gray,arcgis-navigation,arcgis-navigation-night,arcgis-streets,arcgis-streets-night,arcgis-streets-relief,arcgis-topographic,arcgis-oceans,osm-standard,osm-standard-relief,osm-streets,osm-streets-relief,osm-light-gray,osm-dark-gray,arcgis-terrain,arcgis-community,arcgis-charted-territory,arcgis-colored-pencil,arcgis-nova,arcgis-modern-antique,arcgis-midcentury,arcgis-newspaper,arcgis-hillshade-light,arcgis-hillshade-dark|}\""
    ],
    "description": "Use of these basemaps requires a valid ArcGIS Online organizational subscription or an ArcGIS Enterprise license.",
    "prefix": [
      "basemapsWithAPIKeys"
    ]
  },
  "Styles without API keys": {
    "body": [
      "\"${1|satellite,hybrid,oceans,osm,terrain,dark-gray-vector,gray-vector,streets-vector,streets-night-vector,streets-navigation-vector,topo-vector,streets-relief-vector|}\""
    ],
    "description": "List all available map styles to be used without API keys. Use of these basemaps requires an ArcGIS Developer subscription or a valid ArcGIS Online organizational subscription.",
    "prefix": [
      "basemapStyle",
      "basemapsWithoutAPIKeys"
    ]
  },
  "Symbolize using categorical values": {
    "body": [
      "{",
      "\ttype: \"unique-value\",",
      "\tfield: \"${1:REGION}\",",
      "\tdefaultSymbol: ${2:symbol},",
      "\tuniqueValueInfos: [{",
      "\t\tvalue: \"${3:value}\",",
      "\t\tsymbol: ${4:symbol},",
      "\t\tlabel: \"${5:label for the legend}\"",
      "\t}]",
      "}"
    ],
    "description": "Generate a unique value renderer. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, StreamLayer, ImageryLayer, or ImageryTileLayer",
    "prefix": [
      "uniqueValueRendererProps"
    ]
  },
  "Symbols based on classes or ranges": {
    "body": [
      "{",
      "\tclassBreakInfos: [{",
      "\t\tlabel: \"${1:label for the legend}\",",
      "\t\tmaxValue: ${2:10},",
      "\t\tminValue: ${3:0},",
      "\t\tsymbol: ${4:symbol}",
      "\t}],",
      "\tdefaultSymbol: ${5:symbol},",
      "\tfield: \"${6:MAGNITUDE}\",",
      "\ttype: \"class-breaks\",",
      "}"
    ],
    "description": "Generate a ClassBreaksRenderer. This snippet is usually used to set the property \"renderer\" of a FeatureLayer, SceneLayer, MapImageLayer, CSVLayer, GeoJSONLayer, OGCFeatureLayer, WFSLayer, StreamLayer, ImageryLayer, or ImageryTileLayer.",
    "prefix": [
      "classBreaksRendererProps"
    ]
  },
  "World scale 3D callout": {
    "body": [
      "callout: {",
      "\tborder: {",
      "\t\tcolor: ${1:[0, 0, 0, 0.5]},",
      "\t},",
      "\tcolor: ${2:[255, 255, 255, 0.9]},",
      "\tsize: ${3:1.5},",
      "\ttype: \"line\",",
      "},",
      "verticalOffset: {",
      "\tmaxWorldLength: 500000,",
      "\tminWorldLength: 0,",
      "\tscreenLength: 40,",
      "}"
    ],
    "description": "Generates a Callout3D with a verticalOffset for a world scale level and the callout property. They should be set on the property \"callout\" of PointSymbol3D or LabelSymbol3D.",
    "prefix": [
      "callout3DLargeProps"
    ]
  },
  "Add CSV Layer": {
    "body": [
    "CSVLayer({",
    "\turl: \"${1:https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv}\",",
    "\tcopyright: \"${2:USGS Earthquakes}\",",
    "\tpopupTemplate: ${3:template}",
    "});",
    "map.add(csvLayer);"
    ],
    "description": "Add a CSVLayer with a URL",
    "prefix": "csvLayer"
  },
  "Add CSV Layer from Blob": {
    "body": [
    "const blob = new Blob([${1:csv}], {",
    "\ttype: \"plain/text\"",
    "});",
    "let url = URL.createObjectURL(blob);",
    "",
    "const layer = new CSVLayer({",
    "\turl: ${2:url}",
    "});",
    "map.add(layer);"
    ],
    "description": "Create and add a CSVLayer from a Blob object",
    "prefix": "csvLayerFromBlob"
  },
  "Add GeoJSONLayer with URL": {
    "body": [
    "GeoJSONLayer({",
    "\turl: \"${1:https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson}\",",
    "\tcopyright: \"${2:USGS Earthquakes}\"",
    "});",
    "map.add(geojsonlayer);"
    ],
    "description": "Add GeoJSONLayer using URL",
    "prefix": "geoJSONLayer"
  },
  "Create GeoRSSLayer with URL": {
    "body": [
    "GeoRSSLayer({",
    "\turl: \"${1:https://arcgis.github.io/arcgis-samples-javascript/sample-data/layers-georss/sample-georss.xml}\"",
    "});",
    "map.add(geoRSSLayer);"
    ],
    "description": "Add GeoRSSLayer using URL",
    "prefix": "addGeoRSSLayer"
  },
  "Add Graphics to GraphicsLayer": {
    "body": [
    "map.add(graphicsLayer);",  
    "Graphic({",
    "\tgeometry: ${1:point,polyline, polygon,}",
    "\tsymbol: ${2:simpleMarkerSymbol,simpleLineSymbol,simpleFillSymbol,}",
    "});",
    "graphicsLayer.add(pointGraphic);"
    ],
    "description": "Create a graphic and add it to a GraphicsLayer",
    "prefix": "graphicsLayer"
  },
  "Create FeatureLayer with PortalItem": {
      "body": [
        "FeatureLayer({",
        "\tportalItem: {",
        "\t\tid: \"${1:123f4410054b43d7a0bacc1533ceb8dc}\"",
        "\t}",
        "});",
        "",
        "table.load().then(function() {",
        "\tif (table.isTable) {",
        "\t\tmap.tables.add(table);",
        "\t}",
        "});"
      ],
      "description": "Create a FeatureLayer using a PortalItem ID",
      "prefix": "featureLayerWithPortalItem"
    },
  "Create FeatureLayer with Client-Side Graphics": {
      "body": [
        "FeatureLayer({",
        "\tfields: [",
        "\t\t{",
        "\t\t\tname: \"${1:ObjectID}\",",
        "\t\t\talias: \"${2:ObjectID}\",",
        "\t\t\ttype: \"${3:oid}\"",
        "\t\t},",
        "\t\t{",
        "\t\t\tname: \"${4:type}\",",
        "\t\t\talias: \"${5:Type}\",",
        "\t\t\ttype: \"${6:string}\"",
        "\t\t},",
        "\t\t{",
        "\t\t\tname: \"${7:place}\",",
        "\t\t\talias: \"${8:Place}\",",
        "\t\t\ttype: \"${9:string}\"",
        "\t\t},",
        "\t\t{",
        "\t\t\tname: \"${10:recordedDate}\",",
        "\t\t\talias: \"${11:recordedDate}\",",
        "\t\t\ttype: \"${12:date}\"",
        "\t\t}",
        "\t],",
        "\tdateFieldsTimeZone: \"${13:America/New_York}\",",
        "\tobjectIdField: \"${14:ObjectID}\",",
        "\tgeometryType: \"${15:point}\",",
        "\tspatialReference: { wkid: ${16:4326} },",
        "\tsource: graphics,",
        "\tpopupTemplate: pTemplate,",
        "\trenderer: uvRenderer",
        "});",
        "",
        "map.add(featureLayer);"
      ],
      "description": "Create a FeatureLayer with Client-Side Graphics",
      "prefix": "featureLayerwithClientSideGraphics"
    },
  "Load WebMap with MapNotes Layer": {
    "body": [
    "const map = new WebMap({",
    "\tportalItem: {",
    "\t\tid: ${1:\"6b3bfc4900214761a709b5d5a6a3d92b\"}",
    "\t}",
    "});",
    "",
    "const view = new MapView({",
    "\tcontainer: \"viewDiv\",",
    "\tmap",
    "});",
    "",
    "view.when(() => {",
    "\tconsole.log(map.layers.at(0).type);",
    "\tconsole.log(map.layers.items[0].sublayers.items[0].sublayers.items[0].attributes.title);",
    "\tmap.layers.items[0].sublayers.items[1].sublayers.items[0].popupTemplate.content = \"{title} has an updated popup\";",
    "});"
    ],
    "description": "Load an existing web map that contains a MapNotes layer and update its popup template.",
    "prefix": "webMapwithMapNotesLayer"
  },
  "Load Map Notes Layer with Portal Item": {
    "body": [
    "const map = new Map({",
    "\tbasemap: ${1:\"topo-vector\"}",
    "});",
    "",
    "const view = new MapView({",
    "\tcontainer: \"viewDiv\",",
    "\tmap",
    "});",
    "",
    "const promise = Layer.fromPortalItem({",
    "\tportalItem: {",
    "\t\tid: ${2:\"2e2f6840647d4cb9a384532652e5100f\"}",
    "\t}",
    "});",
    "promise.then((layer) => {",
    "\tconsole.log(layer.type);",
    "\tmap.add(layer);",
    "",
    "\tPromise.all([view.when(), layer.load()]).then(() => {",
    "\t\tview.goTo(layer.fullExtent);",
    "\t});",
    "});"
    ],
    "description": "Load a Map Notes Layer with a portal item",
    "prefix": "mapNotesLayerfromPortalItem"
  },
  "Add OGC Feature Layer": {
    "body": [
    "OGCFeatureLayer({",
    "\turl: \"${1:https://vtp2.geo-solutions.it/geoserver/ogc/features}\",",
    "\tcollectionId: \"${2:ne:countries50m}\"",
    "});",
    "map.add(${3:countriesLayer});"
    ],
    "description": "Create an OGCFeatureLayer from URL and collection ID",
    "prefix": "ogcFeatureLayer"
  },
  "Routing with RouteLayer": {
      "body": [
        "const apiKey = \"${1:<your api key>}\";",
        "",
        "const stops = [",
        "\tnew Stop({ geometry: { x: ${2:-117.1825}, y: ${3:34.054722} }}),",
        "\tnew Stop({ geometry: { x: ${4:-116.545278}, y: ${5:33.830278} }})",
        "];",
        "",
        "const routeLayer = new RouteLayer({",
        "\tstops",
        "});",
        "",
        "const view = new MapView({",
        "\tcontainer: \"${6:viewDiv}\",",
        "\tmap: new Map({",
        "\t\tbasemap: \"${7:dark-gray-vector}\",",
        "\t\tlayers: [ routeLayer ]",
        "\t})",
        "});",
        "",
        "view.when().then(async () => {",
        "\tconst results = await routeLayer.solve({ apiKey });",
        "",
        "\trouteLayer.update(results);",
        "",
        "\tview.goTo(routeLayer.routeInfo.geometry);",
        "});"
      ],
      "description": "Set up a routing scenario with RouteLayer and visualize the route.",
      "prefix": "routeLayer"
    },
  "Add Stream Layer from service URL": {
    "body": [
    "StreamLayer({",
    "\turl: \"${1:https://geoeventsample1.esri.com:6443/arcgis/rest/services/LABus/StreamServer}\",",
    "\tpurgeOptions: {",
    "\t\tdisplayCount: ${2:10000}",
    "\t},",
    "\tmaxReconnectionAttempts: ${3:100},",
    "\tmaxReconnectionInterval: ${4:10},",
    "\trenderer: ${5:renderer}",
    "});",
    "map.add(streamLayer);"
    ],
    "description": "Create a StreamLayer from a service URL",
    "prefix": "streamLayer"
  },
  "Add Stream Layer with WebSocketURL": {
    "body": [
    "StreamLayer({",
    "\tpopupTemplate: {",
    "\t\tcontent: \"OBJECTID=${1:OBJECTID}, TRACKID=${2:TRACKID}\",",
    "\t},",
    "\twebSocketUrl: \"${3:ws://localhost:8000}\",",
    "\tfields: [",
    "\t\t{",
    "\t\t\tname: \"OBJECTID\",",
    "\t\t\talias: \"ObjectId\",",
    "\t\t\ttype: \"oid\"",
    "\t\t},",
    "\t\t{",
    "\t\t\tname: \"TRACKID\",",
    "\t\t\talias: \"TrackId\",",
    "\t\t\ttype: \"long\"",
    "\t\t}",
    "\t],",
    "\ttimeInfo: {",
    "\t\ttrackIdField: \"TRACKID\"",
    "\t},",
    "\tgeometryType: \"point\",",
    "\tmaxReconnectionAttempts: ${3:100},",
    "\tmaxReconnectionInterval: ${4:10},",
    "\trenderer: ${5:renderer}",
    "});",
    "map.add(streamLayer);"
    ],
    "description": "Create a StreamLayer by referencing a custom stream service",
    "prefix": "streamLayerwithWebSocketURL"
  },
  "Add Vector Tile Layer": {
    "body": [
    "VectorTileLayer({",
    "\tstyle: {",
    "\t\t\"version\": 8,",
    "\t\t\"sources\": {",
    "\t\t\t\"esri\": {",
    "\t\t\t\t\"type\": \"vector\",",
    "\t\t\t\t\"url\": \"${2:https://VectorTileServiceURL}\"",
    "\t\t\t}",
    "\t\t},",
    "\t\t\"layers\": [",
    "\t\t\t{",
    "\t\t\t\t\"id\": \"${3:layerId}\",",
    "\t\t\t\t\"type\": \"fill\",",
    "\t\t\t\t\"paint\": {",
    "\t\t\t\t\t\"fill-color\": \"${4:#000000}\",",
    "\t\t\t\t\t\"fImageryTileLayerill-opacity\": ${5:1}",
    "\t\t\t\t}",
    "\t\t\t}",
    "\t\t]",
    "\t},",
    "});",
    "map.add(vectorTileLayer);"
    ],
    "description": "Create a VectorTileLayer with a style object",
    "prefix": "vectorTileLayer"
  },
  "Add WFS Layer": {
    "body": [
    "WFSLayer({",
    "\turl: \"${2:https://geobretagne.fr/geoserver/ows}\",",
    "\tname: \"${3:fma:bvme_zhp_vs_culture}\"",
    "});"
    ],
    "description": "Create a WFSLayer from a URL and FeatureType name",
    "prefix": "wfsLayer"
  },
  "Add Imagery Layer": {
    "body": [
    "ImageryLayer({",
    "\turl: ${1:serviceUrl}",
    "});"
    ],
    "description": "Add an ImageryLayer with a service URL",
    "prefix": "imageryLayer"
  },
  "add Imagery Tile Layer with COG": {
      "body": [
        "ImageryTileLayer({",
        "\turl: \"${1:https://ss6imagery.arcgisonline.com/imagery_sample/landsat8/Bolivia_LC08_L1TP_001069_20190719_MS.tiff}\",",
        "\tbandIds: [${2:3}, ${3:2}, ${4:1}]",
        "});"
      ],
      "description": "Create an ImageryTileLayer with with COG",
      "prefix": "imageryTileLayerwithCOG"
    },
  "Create a Transposed Multidimensional Imagery Tile Layer": {
      "body": [
        "ImageryTileLayer({",
        "\turl: \"${1:https://tiledimageservices.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/NLDAS2011_daily_wind_magdir/ImageServer}\",",
        "\ttitle: \"${2:2011 wind - 10 meters above surface}\",",
        "\trenderer: {",
        "\t\ttype: \"vector-field\",",
        "\t\tstyle: \"${3:beaufort-m}\",",
        "\t\tflowRepresentation: \"${4:flow-to}\",",
        "\t\tsymbolTileSize: ${5:30},",
        "\t\tvisualVariables: [",
        "\t\t\t{",
        "\t\t\t\ttype: \"size\",",
        "\t\t\t\tfield: \"${6:Magnitude}\",",
        "\t\t\t\tmaxDataValue: ${7:32},",
        "\t\t\t\tmaxSize: \"${8:60px}\",",
        "\t\t\t\tminDataValue: ${9:0.04},",
        "\t\t\t\tminSize: \"${10:20px}\"",
        "\t\t\t},",
        "\t\t\t{",
        "\t\t\t\ttype: \"rotation\",",
        "\t\t\t\tfield: \"${11:Direction}\",",
        "\t\t\t\trotationType: \"${12:geographic}\"",
        "\t\t\t}",
        "\t\t]",
        "\t}",
        "});"
      ],
      "description": "Create a Transposed Multidimensional Imagery Tile Layer",
      "prefix": "transposedMultidimensionalImageryTileLayerwith"
    },
  "Add WebTileLayer": {
      "body": [
        "WebTileLayer({",
        "\turlTemplate: \"${1:https://{subDomain}.tile.opentopomap.org/{z}/{x}/{y}.png}\",",
        "\tsubDomains: [\"${2:a}\", \"${3:b}\", \"${4:c}\"],",
        "\tcopyright: \"${5:https://www.openstreetmap.org/copyright}\" ",
        "});",
        "",
        "map.add(tiledLayer);"
      ],
      "description": "Create a WebTileLayer with a service URL.",
      "prefix": "webTileLayer"
    },
  "Add WMS Layer": {
    "body": [
    "WMSLayer({",
    "\turl: \"${1:service url}\"",
    "});",
    "await ${2:wmsLayer}.load();",
    "",
    "const sublayer = ${2:wmsLayer}.findSublayerByName(\"${3:My Sublayer}\");",
    "if (sublayer) {",
    "\t${2:wmsLayer}.sublayers = [sublayer];",
    "}",
    "map.add(${2:wmsLayer});"
    ],
    "description": "Add a WMSLayer and filter by sublayer",
    "prefix": "wmsLayer"
  },
  "Add WMTS Layer": {
    "body": [
    "WMTSLayer({",
    "\turl: \"${1:https://gibs.earthdata.nasa.gov/wmts/epsg4326/best}\",",
    "\tactiveLayer: {",
    "\t\tid: \"${2:SRTM_Color_Index}\"",
    "\t}",
    "});"
    ],
    "description": "Add a WMTSLayer",
    "prefix": "wmtsLayer"
  },
  "Add WCS Layer": {
    "body": [
    "WCSLayer({",
    "\turl: \"${1:https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer}\",",
    "\trenderer: ${2:renderer},",
    "\tmultidimensionalDefinition: ${3:multidimensionalDefinition},",
    "\tversion: \"${4:2.0.1}\",",
    "\topacity: ${5:0.5}",
    "});",
    "map.add(wcsLayer);"
    ],
    "description": "Add a WCSLayer",
    "prefix": "wcsLayer"
  },
  "Add Traffic Time-based Map Image Layer": {
    "body": [
    "MapImageLayer({",
    "\turl: \"${1:https://traffic.arcgis.com/arcgis/rest/services/World/Traffic/MapServer}\",",
    "\tdpi: ${2:48},",
    "\timageFormat: \"${3:png32}\",",
    "\trefreshInterval: ${4:3},",
    "\tuseViewTime: ${5:false}",
    "});",
    "map.add(mapImageLayer);"
    ],
    "description": "Add a Traffic Time-based MapImageLayer",
    "prefix": "mapImageLayer"
  },
  "OpenStreetMapLayer": {
      "body": [
        "const osmLayer = new OpenStreetMapLayer();",
        "map.add(osmLayer);"
      ],
      "description": "Add an OpenStreetMapLayer to the map.",
      "prefix": "openStreetMapLayer"
    },
  "Add Bing Maps Layer": {
    "body": [
    "BingMapsLayer({",
    "\tstyle: \"${1:aerial, road, hybrid}\",",
    "\tkey: \"${2:Bing maps key}\"",
    "});",
    "map.add(bingMapsLayer);"
    ],
    "description": "Add a BingMapsLayer with style and key",
    "prefix": "bingMapsLayer"
  },
  "Filter a Scene Layer with SQL expressions": {
    "body": [
    "SceneLayer({",
    "\turl: \"${1:https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Paris_3D_Local_WSL2/SceneServer/layers/0}\",",
    "\tdefinitionExpression: \"${2:SQL Expression}\"",
    "});"
    ],
    "description": "Filter a Scene Layer with SQL expressions",
    "prefix": "sceneLayer"
  },
  "Add Elevation Layer": {
    "body": [
    "ElevationLayer({",
    "\turl: ${1:\"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Elevation/MtBaldy_Elevation/ImageServer\"}",
    "});",
    "map.ground.layers.add(${2:layer});"
    ],
    "description": "Add an Elevation Layer",
    "prefix": "elevationLayer"
  },
  "AddPointCloudLayerRenderer": {
      "body": [
        "const pointCloudLayer = new PointCloudLayer({",
        "\turl: \"${1:https://tiles.arcgis.com/tiles/V6ZHFr6zdgNZuVG0/arcgis/rest/services/BARNEGAT_BAY_LiDAR_UTM/SceneServer}\"",
        "});",
        "",
        "typeRendererCreator.createPCClassRenderer({",
        "\tlayer: pointCloudLayer,",
        "\tfield: \"${2:CLASS_CODE}\"",
        "}).then((response) => {",
        "\tpointCloudLayer.renderer = response.renderer;",
        "});"
      ],
      "description": "Add a PointCloudLayer to the map and apply a class-based color renderer.",
      "prefix": "pointCloudLayerRenderer"
    },
    "Add PointCloudLayer with intensity color modulation": {
    "body": [
      "PointCloudLayer({",
      "\turl: \"${1:https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/SONOMA_AREA1_LiDAR_RGB/SceneServer}\",",
      "\trenderer: {",
      "\t\ttype: \"point-cloud-unique-value\",",
      "\t\tfield: \"${2:CLASS_CODE}\",",
      "\t\tcolorModulation: ${3:colorModulation},",
      "\t\tpointsPerInch: ${4:35},",
      "\t\tcolorUniqueValueInfos: [",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${5:1}\"],",
      "\t\t\t\tlabel: \"${6:Unclassified}\",",
      "\t\t\t\tcolor: [${7:178}, ${8:178}, ${9:178}]",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${10:2}\"],",
      "\t\t\t\tlabel: \"${11:Ground}\",",
      "\t\t\t\tcolor: [${12:168}, ${13:112}, ${14:0}]",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${15:5}\"],",
      "\t\t\t\tlabel: \"${16:High Vegetation}\",",
      "\t\t\t\tcolor: [${17:205}, ${18:245}, ${19:121}]",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${20:6}\"],",
      "\t\t\t\tlabel: \"${21:Building}\",",
      "\t\t\t\tcolor: [${22:229}, ${23:75}, ${24:65}]",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${25:7}\"],",
      "\t\t\t\tlabel: \"${26:Low Point(noise)}\",",
      "\t\t\t\tcolor: [${27:229}, ${28:0}, ${29:0}]",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tvalues: [\"${30:9}\"],",
      "\t\t\t\tlabel: \"${31:Water}\",",
      "\t\t\t\tcolor: [${32:0}, ${33:92}, ${34:230}]",
      "\t\t\t}",
      "\t\t]",
      "\t}",
      "});"
    ],
    "description": "Add a PointCloudLayer with intensity color modulation",
    "prefix": "pointCloudLayerColorModulation"
  },
  "Adjust Point Cloud Layer": {
      "body": [
        "const pointCloudSizeDensity = {",
        "\ttype: \"${1:point-cloud-rgb}\",",
        "\tfield: \"${2:RGB}\",",
        "\tpointSizeAlgorithm: {",
        "\t\ttype: \"${3:fixed-size}\",",
        "\t\tuseRealWorldSymbolSizes: ${4:false},",
        "\t\tsize: ${5:10}",
        "\t},",
        "\tpointsPerInch: ${6:15}",
        "};"
      ],
      "description": "Adjust the size and the density of the points on a Point Cloud Layer.",
      "prefix": "pointCloudSizeDensity"
    },
  "Add Point Cloud Layer Value Filter": {
      "body": [
    "const pointValueFilter = {",
        "\ttype: \"${1:value}\",",
        "\tfield: \"${2:CLASS_CODE}\",",
        "\tmode: \"${3:include}\",",
        "\tvalues: [${4:5}]",
        "};",
        "",
        "${5:pcLayer}.filters.push(${6:valueFilter});"
      ],
      "description": "Add a value filter to a PointCloudLayer",
      "prefix": "pointCloudValueFilter"
    },
  "Add Point Cloud Layer Return Filter": {
      "body": [
        "const pointCloudReturnFilter={",
        "\ttype: \"${1:return}\",",
        "\tfield: \"${2:RETURNS}\",",
        "\tincludedReturns: [\"${3:firstOfMany}\", \"${4:single}\"]",
        "};",
        "",
        "${5:pcLayer}.filters.push(${6:returnFilter});"
      ],
      "description": "Add a return filter to a PointCloudLayer",
      "prefix": "pointCloudReturnFilter"
    },
  "Add Building Scene Layer": {
    "body": [
    "BuildingSceneLayer({",
    "\turl: \"${1:https://tiles.arcgis.com/tiles/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Esri_Admin_Building/SceneServer}\",",
    "\ttitle: \"${2:Administration Building, Redlands - Building Scene Layer}\"",
    "});",
    "webscene.layers.add(buildingLayer);"
    ],
    "description": "Add a BuildingSceneLayer to the map",
    "prefix": "buildingSceneLayer"
  },
  "Add Line Of Sight Layer": {
    "body": [
    "LineOfSightLayer({",
    "\tobserver: new LineOfSightAnalysisObserver({ position: ${1:somePoint} }),",
    "\ttargets: [",
    "\t\tnew LineOfSightAnalysisTarget({ position: ${2:someOtherPoint} })",
    "\t]",
    "});",
    "",
    "view.map.add(lineOfSightLayer);",
    "",
    "await reactiveUtils.whenOnce(() => !view.updating);",
    "",
    "const analysisView = await view.whenAnalysisView(lineOfSightLayer.analysis);",
    "const results = analysisView.results;"
    ],
    "description": "Add a LineOfSightLayer to the SceneView and retrieve analysis results",
    "prefix": "lineOfSightLayer"
  },
  "Add Dimension Layer": {
    "body": [
    "DimensionLayer({",
    "\ttitle: ${1: \"Programmatic dimensions\"},",
    "\tsource: new DimensionAnalysis()",
    "});",
    "view.map.add(dimensionLayer);"
    ],
    "description": "Add a Dimension Layer",
    "prefix": "dimensionLayer"
  },
  "Add Integrated Mesh Layer": {
    "body": [
    "IntegratedMeshLayer({",
    "\turl: ${1:\"https://tiles.arcgis.com/tiles/u0sSNqDXr7puKJrF/arcgis/rest/services/Frankfurt2017_v17/SceneServer/layers/0\"}",
    "});",
    "",
    "view.map.add(integratedMeshLayer);"
    ],
    "description": "Add an Integrated Mesh Layer from a URL.",
    "prefix": "integratedMeshLayer"
  },
  "Create Voxel Layer with Service URL": {
    "body": [
    "VoxelLayer({",
    "\turl: \"${1:https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/EMU_Caribbean_Voxel/SceneServer}\"",
    "});",
    "",
    "const map = new Map({",
    "\tlayers: [voxelLayer],",
    "\tbasemap: {",
    "\t\tbaseLayers: [",
    "\t\t\tnew VectorTileLayer({",
    "\t\t\t\turl: \"${2:https://basemaps.arcgis.com/arcgis/rest/services/OpenStreetMap_GCS_v2/VectorTileServer}\"",
    "\t\t\t})",
    "\t\t]",
    "\t}",
    "});"
    ],
    "description": "Create a Voxel Layer with a Service URL.",
    "prefix": "voxelLayer"
  },
    "Add Media Layer with Video": {
    "body": [
      "const element = new VideoElement({",
      "\tvideo: \"${1:https://arcgis.github.io/arcgis-samples-javascript/sample-data/media-layer/videos/hurricanes_aerosol-aug.mp4}\",",
      "\tgeoreference: new ExtentAndRotationGeoreference({",
      "\t\textent: new Extent({",
      "\t\txmin: ${2:-150},",
      "\t\tymin: ${3:1},",
      "\t\txmax: ${4:20},",
      "\t\tymax: ${5:80},",
      "\t\tspatialReference: {",
      "\t\t\twkid: ${6:4326}",
      "\t\t}",
      "\t\t})",
      "\t})",
      "});",
      "",
      "const layer = new MediaLayer({",
      "\tsource: [element],",
      "\ttitle: \"${7:2017 Hurricanes and Aerosols Simulation}\",",
      "\tcopyright: \"${8:NASA's Goddard Space Flight Center}\"",
      "});"
    ],
    "description": "Add a Media Layer with a video.",
    "prefix": "mediaLayerwithVideo"
  },
  "Add MediaLayer with Control Points Georeference": {
    "body": [
    "const swCornerMapPoint = new Point({ x: ${1:-107.875}, y: ${2:37.875}, spatialReference });",
    "const nwCornerMapPoint = new Point({ x: ${4:-107.875}, y: ${5:38}, spatialReference });",
    "const neCornerMapPoint = new Point({ x: ${6:-107.75}, y: ${7:38}, spatialReference });",
    "const seCornerMapPoint = new Point({ x: ${8:-107.75}, y: ${9:37.875}, spatialReference });",
    "",
    "const graphicsLayer = new GraphicsLayer({",
    "\tgraphics: [",
    "\t\tcreateGraphic(swCornerMapPoint, \"${10:green}\", 0),",
    "\t\tcreateGraphic(nwCornerMapPoint, \"${11:purple}\", 1),",
    "\t\tcreateGraphic(neCornerMapPoint, \"${12:blue}\", 2),",
    "\t\tcreateGraphic(seCornerMapPoint, \"${13:red}\", 3)",
    "\t]",
    "});",
    "",
    "const swCornerControlPoint = {",
    "\tsourcePoint: { x: ${14:89}, y: ${15:1918} },",
    "\tmapPoint: swCornerMapPoint",
    "};",
    "const nwCornerControlPoint = {",
    "\tsourcePoint: { x: ${16:83}, y: ${17:101} },",
    "\tmapPoint: nwCornerMapPoint",
    "};",
    "const neCornerControlPoint = {",
    "\tsourcePoint: { x: ${18:1508}, y: ${19:97} },",
    "\tmapPoint: neCornerMapPoint",
    "};",
    "const seCornerControlPoint = {",
    "\tsourcePoint: { x: ${20:1517}, y: ${21:1906} },",
    "\tmapPoint: seCornerMapPoint",
    "};",
    "",
    "const controlPoints = [",
    "\tswCornerControlPoint,",
    "\tnwCornerControlPoint,",
    "\tneCornerControlPoint,",
    "\tseCornerControlPoint",
    "];",
    "",
    "const controlPointsGeoreference = new ControlPointsGeoreference({",
    "\tcontrolPoints,",
    "\twidth: ${22:1585},",
    "\theight: ${23:2048}",
    "});",
    "",
    "const imageElement = new ImageElement({",
    "\timage: \"${24:https://arcgis.github.io/arcgis-samples-javascript/sample-data/media-layer/telluride/TellurideQuad.webp}\",",
    "\tgeoreference: controlPointsGeoreference",
    "});",
    "",
    "const mediaLayer = new MediaLayer({",
    "\tsource: [imageElement],",
    "\ttitle: \"${25:Geologic Map of the Telluride Quadrangle, Southwestern Colorado}\",",
    "\tcopyright: \"${26:Wilbur S Burbank and Robert G. Luedke, 1966}\",",
    "\tspatialReference",
    "});"
    ],
    "description": "Add a MediaLayer with a control points georeference to map an image accurately.",
    "prefix": "mediaLayerControlPoints"
  },
  "Add KML Layer": {
    "body": [
    "KMLLayer({",
    "\turl: \"http://quickmap.dot.ca.gov/data/lcs.kml\"",
    "});",
    "map.add(kmlLayer);"
    ],
    "description": "Add a KML layer",
    "prefix": "kmlLayer"
  },
    "Add GroupLayer with LayerList": {
      "body": [
        "LayerList({",
        "\tview: ${1:view},",
        "\tlistItemCreatedFunction: ${2:defineActions}",
        "});",
        "",
        "async function ${2:defineActions}(event) {",
        "\tconst item = event.item;",
        "\tawait item.layer.when();",
        "",
        "\tif (item.title === \"${3:US Demographics}\") {",
        "\t\titem.actionsSections = [",
        "\t\t\t[",
        "\t\t\t\t{",
        "\t\t\t\t\ttitle: \"${4:Go to full extent}\",",
        "\t\t\t\t\ticon: \"${5:zoom-out-fixed}\",",
        "\t\t\t\t\tid: \"${6:full-extent}\"",
        "\t\t\t\t},",
        "\t\t\t\t{",
        "\t\t\t\t\ttitle: \"${7:Layer information}\",",
        "\t\t\t\t\ticon: \"${8:information}\",",
        "\t\t\t\t\tid: \"${9:information}\"",
        "\t\t\t\t}",
        "\t\t\t],",
        "\t\t\t[",
        "\t\t\t\t{",
        "\t\t\t\t\ttitle: \"${10:Increase opacity}\",",
        "\t\t\t\t\ticon: \"${11:chevron-up}\",",
        "\t\t\t\t\tid: \"${12:increase-opacity}\"",
        "\t\t\t\t},",
        "\t\t\t\t{",
        "\t\t\t\t\ttitle: \"${13:Decrease opacity}\",",
        "\t\t\t\t\ticon: \"${14:chevron-down}\",",
        "\t\t\t\t\tid: \"${15:decrease-opacity}\"",
        "\t\t\t\t}",
        "\t\t\t]",
        "\t\t];",
        "\t}",
        "}"
      ],
      "description": "Creates a Group Layer with LayerList Widget",
      "prefix": "groupLayerwithLayerListWidget"
    },
  "Add Subtype Group Layer": {
    "body": [
    "{",
    "\turl: ${1: \"https://sampleserver7.arcgisonline.com/server/rest/services/UtilityNetwork/NapervilleElectric/FeatureServer/0\"}",
    "\tsublayers: [",
    "\t\t{",
    "\t\t\tsubtypeCode: 12,",
    "\t\t\tvisible: true,",
    "\t\t\trenderer: simpleRenderer",
    "\t\t},",
    "\t\t{",
    "\t\t\tsubtypeCode: 14,",
    "\t\t\tvisible: false,",
    "\t\t\trenderer: classBreaksRenderer",
    "\t\t},",
    "\t\t{",
    "\t\t\tsubtypeCode: 16,",
    "\t\t\tvisible: true,",
    "\t\t\trenderer: classBreaksRenderer,",
    "\t\t\tpopupTemplate: popupTemplate",
    "\t\t}",
    "\t]",
    "};",
    "map.add(stgl);"
    ],
    "description": "Create and add a Subtype Group Layer with sublayers",
    "prefix": "subtypeGroupLayer"
  },
  "Add Imagery Tile Layer with CovergeJSON object": {
    "body": [
    "ImageryTileLayer({",
    "\tsource: {",
    "\t\ttype: \"Coverage\",",
    "\t\tdomain: {",
    "\t\t\ttype: \"Domain\",",
    "\t\t\tdomainType: \"Grid\",",
    "\t\t\taxes: {",
    "\t\t\t\tx: { values: ${1:[-10, -5, 0]} },",
    "\t\t\t\ty: { values: ${2:[40, 50]} },",
    "\t\t\t\tt: { values: [${3:\"2010-01-01T00:12:20Z\"}] }",
    "\t\t\t},",
    "\t\t\treferencing: [",
    "\t\t\t{",
    "\t\t\t\tcoordinates: [\"x\", \"y\"],",
    "\t\t\t\tsystem: {",
    "\t\t\t\t\ttype: ${4:\"GeographicCRS\"},",
    "\t\t\t\t\tid: ${5:\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"}",
    "\t\t\t\t}",
    "\t\t\t},",
    "\t\t\t{",
    "\t\t\t\tcoordinates: [\"t\"],",
    "\t\t\t\tsystem: {",
    "\t\t\t\t\ttype: \"TemporalRS\",",
    "\t\t\t\t\tcalendar: \"Gregorian\"",
    "\t\t\t\t}",
    "\t\t\t}",
    "\t\t\t]",
    "\t\t},",
    "\t\tparameters: {",
    "\t\t},",
    "\t\tranges: {",
    "\t\t\tLC: {",
    "\t\t\t\ttype: \"NdArray\",",
    "\t\t\t\tdataType: \"integer\",",
    "\t\t\t\taxisNames: [\"t\", \"y\", \"x\"],",
    "\t\t\t\tshape: [1, 2, 3],",
    "\t\t\t\tvalues: [${6: 1, 1, null, 2, 1, 2}]",
    "\t\t\t}",
    "\t\t}",
    "\t}",
    "});",
    "map.add(layer);"
    ],
    "description": "Create and add an Imagery Tile Layer with CovergeJSON object",
    "prefix": ["imageryTileLayerwithCovergeJSON", 
    "tileManager"
  ]
  },
  "Add Knowledge Graph Layer": {
    "body": [
    "KnowledgeGraphLayer({",
    "\turl: ${1:\"https://sampleserver7.arcgisonline.com/arcgis/rest/services/Hosted/SupplyChain/KnowledgeGraphServer\"}",
    "});",
    "",
    "kgl.load().then(() => {",
    "\tmap.add(kgl);",
    "});"
    ],
    "description": "Create and add a Knowledge Graph Layer",
    "prefix": "knowledgeGraphLayer"
  }
} 
